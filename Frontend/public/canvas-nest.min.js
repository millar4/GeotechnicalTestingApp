!function(){
    function o(w, v, i){ return w.getAttribute(v) || i; }
    function j(i){ return document.getElementsByTagName(i); }

    function l(){
        var i = j("script"), w = i.length, v = i[w-1];
        // NEW: Use precomputed constant 0.6666667 instead of 2/3
        return {
            l: w,
            z: o(v, "zIndex", -1),
            o: o(v, "opacity", 0.5),
            c: o(v, "color", "0,0,0"),
            n: Math.floor(o(v, "count", 300) * 0.6666667)
        };
    }

    function k(){
        r = u.width = window.innerWidth 
            || document.documentElement.clientWidth 
            || document.body.clientWidth;
        n = u.height = window.innerHeight 
            || document.documentElement.clientHeight 
            || document.body.clientHeight;
    }

    function b(){
        e.clearRect(0, 0, r, n);

        // Update particle positions
        for (var i = 0; i < t.length; i++){
            t[i].x += t[i].xa;
            t[i].y += t[i].ya;
            if (t[i].x > r || t[i].x < 0) t[i].xa = -t[i].xa;
            if (t[i].y > n || t[i].y < 0) t[i].ya = -t[i].ya;
            e.fillRect(t[i].x - 0.5, t[i].y - 0.5, 1, 1);
        }

        // Process connection between mouse and particles
        if(f.x !== null && f.y !== null){
            for (i = 0; i < t.length; i++){
                var dx = t[i].x - f.x,
                    dy = t[i].y - f.y,
                    distSq = dx * dx + dy * dy;
                if(distSq < f.max){
                    // NEW: If distance in [max/2, max) then gently pull particle toward mouse
                    if(distSq >= f.max / 2){
                        t[i].x -= 0.003 * dx;
                        t[i].y -= 0.003 * dy;
                    }
                    var A = (f.max - distSq) / f.max;
                    e.beginPath();
                    e.lineWidth = A;
                    e.strokeStyle = "rgba(" + s.c + "," + (A + 0.2) + ")";
                    e.moveTo(t[i].x, t[i].y);
                    e.lineTo(f.x, f.y);
                    e.stroke();
                }
            }
        }

        // Process pairwise connections between particles
        for (i = 0; i < t.length; i++){
            for (var j = i + 1; j < t.length; j++){
                var dx = t[i].x - t[j].x,
                    dy = t[i].y - t[j].y,
                    distSq = dx * dx + dy * dy;
                if(distSq < t[i].max){
                    var A = (t[i].max - distSq) / t[i].max;
                    e.beginPath();
                    e.lineWidth = A;
                    e.strokeStyle = "rgba(" + s.c + "," + (A + 0.2) + ")";
                    e.moveTo(t[i].x, t[i].y);
                    e.lineTo(t[j].x, t[j].y);
                    e.stroke();
                }
            }
        }
        // NEW: Only continue animation if enabled
        if(window.canvasNestEnabled){
            m(b);
        }
    }

    var u = document.createElement("canvas"),
        s = l(),
        c = "c_n" + s.l,
        e = u.getContext("2d"),
        r, n,
        // NEW: Precompute fallback delay as 22ms instead of computing 1000/45 each time
        m = window.requestAnimationFrame 
          || window.webkitRequestAnimationFrame 
          || window.mozRequestAnimationFrame 
          || window.oRequestAnimationFrame 
          || window.msRequestAnimationFrame 
          || function(i){ window.setTimeout(i, 22); },
        a = Math.random,
        f = { x: null, y: null, max: 40000 };

    // NEW: Global flag to control animation state
    window.canvasNestEnabled = true;

    u.id = c;
    u.style.cssText = "position:fixed;top:0;left:0;z-index:" + s.z + ";opacity:" + s.o;
    j("body")[0].appendChild(u);

    k();
    window.onresize = k;

    window.onmousemove = function(i){
        i = i || window.event;
        f.x = i.clientX;
        f.y = i.clientY;
    };
    window.onmouseout = function(){
        f.x = null;
        f.y = null;
    };

    var t = [];
    for(var p = 0; p < s.n; p++){
        var h = a() * r,
            g = a() * n,
            q = (2 * a() - 1) * 0.5,
            d = (2 * a() - 1) * 0.5;
        t.push({ x: h, y: g, xa: q, ya: d, max: 30000 });
    }

    // NEW: Expose start function to restart animation when enabled
    window.startCanvasNest = b;

    setTimeout(function(){ b(); }, 100);
}();
